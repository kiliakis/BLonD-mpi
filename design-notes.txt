1) The program is run with the classic python mainfile.py
    * Perhaps arg parser to set the num of processes/nodes
2) Spawn(executable, args, maxprocs, info, root, errcodes)
    * For the executable-args we need to run something like:
        mpiexec -n 4 -N 4 python worker.py
    * maxprocs = 4x4
    * check if this approach works (that the master process can still communicate with the child processes)
3) The worker should like:
    * while not received end signal
    * wait for tasks, execute them, reply to the master that I finished (pass some info on what task I completed)
    * The task message could be a callable or a string name or a number that points to the function to call
    * All the functions (kick, drift, etc) should be written in form that is not using any self. info but only the arguments passed to it
    * We have to think how the master will pass all the data to the child processes
    * In general data don't need to be communicated back and can remain in the remote processes
    * only after histogram, a small part (new histo) has to be communicated back to the master process to be reduced.